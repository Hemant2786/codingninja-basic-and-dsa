import java.util.ArrayList;

/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

    static ArrayList<BinaryTreeNode<Integer>> path=new ArrayList<>();

    public static boolean findnode(BinaryTreeNode<Integer> root, int node)
	{
		if(root==null){
			return false;
		}
		if(root.data==node){
			path.add(root);
             return true;
		}
        
		boolean left=findnode(root.left,node);
		if(left){
			path.add(root);
			return true;
		}
		boolean right=findnode(root.right,node);
		if(right){
			path.add(root);
			return true;
		}
		return false;
	}

	public static void nodesAtDistanceK(BinaryTreeNode<Integer> root, int node, int k) {
	    //Your code goes here
		findnode(root, node);

		for(int i=0;i<path.size();i++){
			kdown(path.get(i), k, i==0? null: path.get(i-1));
			k--;
		}
	}

	public static void kdown(BinaryTreeNode<Integer> root, int k, BinaryTreeNode<Integer> block)
	{
		if(root==null||k<0||root==block){
			return;
		}

		if(k==0){
		   System.out.println(root.data);
		}
		kdown(root.left,k-1,block);
		kdown(root.right,k-1,block);
	}

}
